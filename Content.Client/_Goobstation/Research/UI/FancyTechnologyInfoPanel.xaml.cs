using Content.Client.Lathe;
using Content.Client.Research;
using Content.Client.Research.UI;
using Content.Shared._Goobstation.Research;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Goobstation.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class FancyTechnologyInfoPanel : Control
{
    [Dependency] private readonly IEntityManager _ent = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    public TechnologyPrototype Prototype;
    public Action<TechnologyPrototype>? BuyAction;
    public FancyTechnologyInfoPanel(TechnologyPrototype proto, bool hasAccess, ResearchAvailability availability, SpriteSystem sprite)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        var lathe = _ent.System<LatheSystem>();
        var research = _ent.System<ResearchSystem>();
        Prototype = proto;

        TechnologyNameLabel.Text = Loc.GetString(proto.Name);
        DisciplineTexture.Texture = sprite.Frame0(_proto.Index(proto.Discipline).Icon);
        TechnologyTexture.Texture = sprite.Frame0(proto.Icon);

        // Tech requirements
        RequiredTechContainer.DisposeAllChildren();
        if (proto.TechnologyPrerequisites.Count == 0)
        {
            NoPrereqLabel.Visible = true;
            PrereqsContainer.Visible = false;
        }
        else
        {
            NoPrereqLabel.Visible = false;
            PrereqsContainer.Visible = true;

            foreach (var item in proto.TechnologyPrerequisites)
            {
                var prereq = _proto.Index(item);
                var control = new MiniTechnologyCardControl(prereq, _proto, sprite, research.GetTechnologyDescription(prereq, true, false, true));
                RequiredTechContainer.AddChild(control);
            }
        }

        // There goes recipe unlocks
        UnlocksContainer.DisposeAllChildren();
        foreach (var item in proto.RecipeUnlocks)
        {
            var recipe = _proto.Index(item);
            var control = new MiniRecipeCardControl(proto, recipe, _proto, sprite, lathe);
            UnlocksContainer.AddChild(control);
        }
        if (!hasAccess)
            ResearchButton.ToolTip = Loc.GetString("research-console-no-access-popup");

        if (availability == ResearchAvailability.Researched)
            ResearchButton.Text = Loc.GetString("research-console-menu-server-researched-button");

        Color? color = availability switch
        {
            ResearchAvailability.Researched => Color.LimeGreen,
            ResearchAvailability.Unavailable => Color.Crimson,
            _ => null
        };

        TechnologyCostLabel.SetMessage(Loc.GetString("research-console-tech-cost-label", ("cost", proto.Cost)), defaultColor: color);

        if (availability == ResearchAvailability.Researched)
            ResearchButton.Text = Loc.GetString("research-console-menu-server-researched-button");

        ResearchButton.Disabled = !hasAccess || availability != ResearchAvailability.Available;
        ResearchButton.OnPressed += Bought;
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        ResearchButton.OnPressed -= Bought;
    }
    private void Bought(BaseButton.ButtonEventArgs args)
    {
        BuyAction?.Invoke(Prototype);
    }

}
