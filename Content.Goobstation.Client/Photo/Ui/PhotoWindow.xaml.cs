using System.Numerics;
using System.Threading.Tasks;
using Content.Client.Viewport;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using SixLabors.ImageSharp.PixelFormats;

namespace Content.Goobstation.Client.Photo.Ui;

[GenerateTypedNameReferences]
public sealed partial class PhotoWindow : BaseWindow
{
    public Action? ScreenshotTaken;

    public PhotoWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        CloseButton.OnPressed += args => Close();
    }

    public async void Populate(MapId map, Vector2 offset)
    {
        FixedEye eye = new()
        {
            Position = new MapCoordinates(offset, map),
            DrawFov = true,
            DrawLight = true,
            Zoom = new(0.3f)
        };

        ScalingViewport photoView = new()
        {
            VerticalExpand = true,
            HorizontalExpand = true,
            MinSize = new(450, 450),
            SetSize = new(450, 450),
            ViewportSize = new(450, 450),
            MouseFilter = MouseFilterMode.Ignore,
            Eye = eye
        };
        PaperBackground.AddChild(photoView);

        // theres no event raising after full pvs load, so just wait for one sec until everything is loaded
        await Task.Delay(TimeSpan.FromSeconds(1f));

        photoView.Screenshot(TakeScreenshot);

    }

    private void TakeScreenshot(SixLabors.ImageSharp.Image<Rgba32> image)
    {
        TextureRect texture = new()
        {
            VerticalExpand = true,
            HorizontalExpand = true,
            MinSize = new(450, 450),
            Stretch = TextureRect.StretchMode.KeepAspectCentered,
            Texture = Texture.LoadFromImage(image)
        };

        PaperBackground.RemoveAllChildren();
        PaperBackground.AddChild(texture);
        ScreenshotTaken?.Invoke();
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        return DragMode.Move;
    }
}

